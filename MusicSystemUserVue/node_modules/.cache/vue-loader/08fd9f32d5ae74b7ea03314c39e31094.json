{"remainingRequest":"F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\src\\pages\\Home.vue?vue&type=style&index=0&id=5a90ec03&lang=scss&scoped=true&","dependencies":[{"path":"F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\src\\pages\\Home.vue","mtime":1696223180000},{"path":"F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":1696214897000},{"path":"F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1696214897000},{"path":"F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\postcss-loader\\src\\index.js","mtime":1696214897000},{"path":"F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1697190997676},{"path":"F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696214897000},{"path":"F:\\外包项目重置\\音乐管理系统\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1696214897000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgIi4uL2Fzc2V0cy9jc3MvaG9tZS5zY3NzIjsK"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";AAuGA","file":"Home.vue","sourceRoot":"src/pages","sourcesContent":["<!--\n * @Description:\n * @Author: Rabbiter\n * @Date: 2023-03-16 01:26:34\n-->\n<template>\n    <div class=\"home\">\n        <swiper />\n        <div class=\"section\" v-for=\"(item, index) in songsList\" :key=\"index\">\n            <div class=\"section-title\"><i :class=\"item.icon\" style=\"font-size: 34px;\"></i><b style=\"font-size: 32px;\"> {{ item.name }}</b></div>\n            <content-list :contentList=\"item.list\"></content-list>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Swiper from \"../components/Swiper\";\nimport contentList from \"../components/ContentList\";\nimport { getAllSinger, getAllSongList } from \"../api/index\";\nexport default {\n    name: \"home\",\n    components: {\n        Swiper,\n        contentList,\n    },\n    data() {\n        return {\n            songsList: [\n                { name: \"歌单\", list: [], icon:\"iconfont icon-r-list\" },\n                { name: \"歌手\", list: [], icon:\"iconfont icon-r-love\" },\n            ],\n        };\n    },\n    created() {\n        this.getSongList();\n        this.getSinger();\n    },\n    methods: {\n        getSongList() {\n            //获取前十条歌单\n            getAllSongList()\n                .then((res) => {\n                    this.songsList[0].list = res.slice(0, 10);\n                })\n                .catch((e) => {\n                    if (e.data == undefined) {\n                        if (\n                            e ==\n                            \"TypeError: Cannot read properties of undefined (reading 'status')\"\n                        ) {\n                            e = \"Network Error\";\n                        }\n                        this.$message({\n                            showClose: true,\n                            message: e,\n                            type: \"error\",\n                            duration: 5000,\n                        });\n                    } else {\n                        this.$message({\n                            showClose: true,\n                            message: e.data,\n                            type: \"error\",\n                            duration: 5000,\n                        });\n                    }\n                });\n        },\n        getSinger() {\n            //获取前十名歌手\n            getAllSinger()\n                .then((res) => {\n                    this.songsList[1].list = res.slice(0, 10);\n                })\n                .catch((e) => {\n                    if (e.data == undefined) {\n                        if (\n                            e ==\n                            \"TypeError: Cannot read properties of undefined (reading 'status')\"\n                        ) {\n                            e = \"Network Error\";\n                        }\n                        this.$message({\n                            showClose: true,\n                            message: e,\n                            type: \"error\",\n                            duration: 5000,\n                        });\n                    } else {\n                        this.$message({\n                            showClose: true,\n                            message: e.data,\n                            type: \"error\",\n                            duration: 5000,\n                        });\n                    }\n                });\n        },\n    },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/css/home.scss\";\n</style>\n"]}]}