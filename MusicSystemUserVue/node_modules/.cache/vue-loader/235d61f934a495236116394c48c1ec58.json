{"remainingRequest":"D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\src\\components\\TheAside.vue?vue&type=style&index=0&id=3482d7f7&lang=scss&scoped=true&","dependencies":[{"path":"D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\src\\components\\TheAside.vue","mtime":1678901196000},{"path":"D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\css-loader\\dist\\cjs.js","mtime":1696214897000},{"path":"D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1696214897000},{"path":"D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\postcss-loader\\src\\index.js","mtime":1696214897000},{"path":"D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1697190997676},{"path":"D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696214897000},{"path":"D:\\keshe\\音乐管理系统\\MusicSystem\\MusicSystemUserVue\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1696214897000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpAaW1wb3J0ICcuLi9hc3NldHMvY3NzL3RoZS1hc2lkZS5zY3NzJzsNCg=="},{"version":3,"sources":["TheAside.vue"],"names":[],"mappings":";AAsGA","file":"TheAside.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <transition name=\"slide-fade\">\r\n        <div class=\"the-aside\" v-if=\"showAside\">\r\n            <h2 class=\"title\">播放列表</h2>\r\n            <ul class=\"menus\">\r\n                <li v-for=\"(item,index) in listOfSongs\" :key=\"index\" :class=\"{'is-play': id==item.id}\"\r\n                @click=\"toplay(item.id,item.url,item.pic,item.index,item.name,item.lyric)\">\r\n                    {{replaceFName(item.name)}}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </transition>\r\n</template>\r\n<script>\r\nimport {mapGetters} from 'vuex';\r\nimport { getCollectOfUserId } from '../api/index';\r\n\r\nexport default {\r\n    name: 'the-aside',\r\n    computed: {\r\n        ...mapGetters([\r\n            'showAside',         //是否显示播放中的歌曲列表\r\n            'listOfSongs',       //当前歌曲列表\r\n            'id',                //播放中的音乐id\r\n            'loginIn',              //用户是否已登录\r\n            'userId',               //当前登录用户的id\r\n            'isActive',             //当前播放的歌曲是否已收藏\r\n        ])\r\n    },\r\n    mounted(){\r\n        let _this = this;\r\n        document.addEventListener('click',function(){\r\n            _this.$store.commit('setShowAside',false)\r\n        },true);\r\n    },\r\n    methods:{\r\n        //获取名字前半部分--歌手名\r\n        replaceLName(str){\r\n            let arr = str.split('-');\r\n            return arr[0];\r\n        },\r\n        //获取名字后半部分--歌名\r\n        replaceFName(str){\r\n            let arr = str.split('-');\r\n            return arr[1];\r\n        },\r\n        //播放\r\n        toplay: function(id,url,pic,index,name,lyric){\r\n            this.$store.commit('setId',id);\r\n            this.$store.commit('setUrl',this.$store.state.configure.HOST+url);\r\n            this.$store.commit('setPicUrl',this.$store.state.configure.HOST+pic);\r\n            this.$store.commit('setListIndex',index);\r\n            this.$store.commit('setTitle',this.replaceFName(name));\r\n            this.$store.commit('setArtist',this.replaceLName(name));\r\n            this.$store.commit('setLyric',this.parseLyric(lyric));\r\n            this.$store.commit('setIsActive',false);\r\n            if(this.loginIn){\r\n                getCollectOfUserId(this.userId)\r\n                    .then(res =>{\r\n                        for(let item of res){\r\n                            if(item.songId == id){\r\n                                this.$store.commit('setIsActive',true);\r\n                                break;\r\n                            }\r\n                        }\r\n                    })\r\n            }\r\n        },\r\n        //解析歌词\r\n        parseLyric(text){\r\n            let lines = text.split(\"\\n\");                   //将歌词按行分解成数组\r\n            let pattern = /\\[\\d{2}:\\d{2}.(\\d{3}|\\d{2})\\]/g; //时间格式的正则表达式\r\n            let result = [];                                //返回值\r\n            //对于歌词格式不对的直接返回\r\n            if(!(/\\[.+\\]/.test(text))){\r\n                return [[0,text]]\r\n            }        \r\n            //去掉前面格式不正确的行\r\n            while(!pattern.test(lines[0])){\r\n                lines = lines.slice(1);\r\n            }\r\n            //遍历每一行，形成一个每行带着俩元素的数组，第一个元素是以秒为计算单位的时间，第二个元素是歌词\r\n            for(let item of lines){\r\n                let time = item.match(pattern);  //存前面的时间段\r\n                let value = item.replace(pattern,'');//存后面的歌词\r\n                for(let item1 of time){\r\n                    let t = item1.slice(1,-1).split(\":\");   //取出时间，换算成数组\r\n                    if(value!=''){\r\n                        result.push([parseInt(t[0],10)*60 + parseFloat(t[1]),value]);\r\n                    }                    \r\n                }                \r\n            }\r\n            //按照第一个元素--时间--排序\r\n            result.sort(function(a,b){\r\n                return a[0] - b[0];\r\n            });\r\n            return result;\r\n        },\r\n    }\r\n}\r\n</script>\r\n<style  lang=\"scss\" scoped>\r\n@import '../assets/css/the-aside.scss';\r\n</style>\r\n"]}]}